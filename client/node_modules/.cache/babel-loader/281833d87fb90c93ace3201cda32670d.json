{"ast":null,"code":"// import { takeLatest, put, all, call } from 'redux-saga/effects';\n// import UserActionTypes from './user.types';\n// import {\n//   signInSuccess,\n//   signInFailure,\n//   signOutSuccess,\n//   signOutFailure,\n//   signUpSuccess,\n//   signUpFailure\n// } from './user.action';\n// import {\n//   auth,\n//   googleProvider,\n//   createUserProfileDocument,\n//   getCurrentUser\n// } from '../../firebase/firebase.utils';\n// export function* getSnapshotFromUserAuth(userAuth, additionalData) {\n//     try {\n//       const userRef = yield call(\n//         createUserProfileDocument,\n//         userAuth,\n//         additionalData\n//       );\n//       const userSnapshot = yield userRef.get();\n//       yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n//     } catch (error) {\n//       yield put(signInFailure(error));\n//     }\n//   }\n//   export function* signInWithGoogle() {\n//     try {\n//       const { user } = yield auth.signInWithPopup(googleProvider);\n//       yield getSnapshotFromUserAuth(user);\n//     } catch (error) {\n//       yield put(signInFailure(error));\n//     }\n//   }\n//   export function* signInWithEmail({ payload: { email, password } }) {\n//     try {\n//       const { user } = yield auth.signInWithEmailAndPassword(email, password);\n//       yield getSnapshotFromUserAuth(user);\n//     } catch (error) {\n//       yield put(signInFailure(error));\n//     }\n//   }\n//   export function* isUserAuthenticated() {\n//     try {\n//       const userAuth = yield getCurrentUser();\n//       if (!userAuth) return;\n//       yield getSnapshotFromUserAuth(userAuth);\n//     } catch (error) {\n//       yield put(signInFailure(error));\n//     }\n//   }\n//   export function* signOut() {\n//     try {\n//       yield auth.signOut();\n//       yield put(signOutSuccess());\n//     } catch (error) {\n//       yield put(signOutFailure(error));\n//     }\n//   }\n//   export function* signUp({ payload: { email, password, displayName } }) {\n//     try {\n//       const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n//       yield put(signUpSuccess({ user, additionalData: { displayName } }));\n//     } catch (error) {\n//       yield put(signUpFailure(error));\n//     }\n//   }\n//   export function* signInAfterSignUp({ payload: { user, additionalData } }) {\n//     yield getSnapshotFromUserAuth(user, additionalData);\n//   }\n//   export function* onGoogleSignInStart() {\n//     yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n//   }\n//   export function* onEmailSignInStart() {\n//     yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n//   }\n//   export function* onCheckUserSession() {\n//     yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n//   }\n//   export function* onSignOutStart() {\n//     yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n//   }\n//   export function* onSignUpStart() {\n//     yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n//   }\n//   export function* onSignUpSuccess() {\n//     yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n//   }\n//   export function* userSagas() {\n//     yield all([\n//       call(onGoogleSignInStart),\n//       call(onEmailSignInStart),\n//       call(onCheckUserSession),\n//       call(onSignOutStart),\n//       call(onSignUpStart),\n//       call(onSignUpSuccess)\n//     ]);\n//   }","map":{"version":3,"sources":["F:/XAMPP/htdocs/ecom-just-react/src/redux/user/user.sagas.js"],"names":[],"mappingssourcesContent":["// import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\n// import UserActionTypes from './user.types';\r\n\r\n// import {\r\n//   signInSuccess,\r\n//   signInFailure,\r\n//   signOutSuccess,\r\n//   signOutFailure,\r\n//   signUpSuccess,\r\n//   signUpFailure\r\n// } from './user.action';\r\n\r\n// import {\r\n//   auth,\r\n//   googleProvider,\r\n//   createUserProfileDocument,\r\n//   getCurrentUser\r\n// } from '../../firebase/firebase.utils';\r\n\r\n\r\n// export function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n//     try {\r\n//       const userRef = yield call(\r\n//         createUserProfileDocument,\r\n//         userAuth,\r\n//         additionalData\r\n//       );\r\n//       const userSnapshot = yield userRef.get();\r\n//       yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n//     } catch (error) {\r\n//       yield put(signInFailure(error));\r\n//     }\r\n//   }\r\n  \r\n//   export function* signInWithGoogle() {\r\n//     try {\r\n//       const { user } = yield auth.signInWithPopup(googleProvider);\r\n//       yield getSnapshotFromUserAuth(user);\r\n//     } catch (error) {\r\n//       yield put(signInFailure(error));\r\n//     }\r\n//   }\r\n  \r\n//   export function* signInWithEmail({ payload: { email, password } }) {\r\n//     try {\r\n//       const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n//       yield getSnapshotFromUserAuth(user);\r\n//     } catch (error) {\r\n//       yield put(signInFailure(error));\r\n//     }\r\n//   }\r\n  \r\n//   export function* isUserAuthenticated() {\r\n//     try {\r\n//       const userAuth = yield getCurrentUser();\r\n//       if (!userAuth) return;\r\n//       yield getSnapshotFromUserAuth(userAuth);\r\n//     } catch (error) {\r\n//       yield put(signInFailure(error));\r\n//     }\r\n//   }\r\n  \r\n//   export function* signOut() {\r\n//     try {\r\n//       yield auth.signOut();\r\n//       yield put(signOutSuccess());\r\n//     } catch (error) {\r\n//       yield put(signOutFailure(error));\r\n//     }\r\n//   }\r\n  \r\n//   export function* signUp({ payload: { email, password, displayName } }) {\r\n//     try {\r\n//       const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n//       yield put(signUpSuccess({ user, additionalData: { displayName } }));\r\n//     } catch (error) {\r\n//       yield put(signUpFailure(error));\r\n//     }\r\n//   }\r\n  \r\n//   export function* signInAfterSignUp({ payload: { user, additionalData } }) {\r\n//     yield getSnapshotFromUserAuth(user, additionalData);\r\n//   }\r\n  \r\n//   export function* onGoogleSignInStart() {\r\n//     yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n//   }\r\n  \r\n//   export function* onEmailSignInStart() {\r\n//     yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n//   }\r\n  \r\n//   export function* onCheckUserSession() {\r\n//     yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n//   }\r\n  \r\n//   export function* onSignOutStart() {\r\n//     yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\r\n//   }\r\n  \r\n//   export function* onSignUpStart() {\r\n//     yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\r\n//   }\r\n  \r\n//   export function* onSignUpSuccess() {\r\n//     yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\r\n//   }\r\n  \r\n//   export function* userSagas() {\r\n//     yield all([\r\n//       call(onGoogleSignInStart),\r\n//       call(onEmailSignInStart),\r\n//       call(onCheckUserSession),\r\n//       call(onSignOutStart),\r\n//       call(onSignUpStart),\r\n//       call(onSignUpSuccess)\r\n//     ]);\r\n//   }"]},"metadata":{},"sourceType":"module"}