{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport { FLUSH, PAUSE, PERSIST, PURGE, REHYDRATE, DEFAULT_VERSION } from './constants';\nimport autoMergeLevel1 from './stateReconciler/autoMergeLevel1';\nimport createPersistoid from './createPersistoid';\nimport defaultGetStoredState from './getStoredState';\nimport purgeStoredState from './purgeStoredState';\nvar DEFAULT_TIMEOUT = 5000;\n/*\n  @TODO add validation / handling for:\n  - persisting a reducer which has nested _persist\n  - handling actions that fire before reydrate is called\n*/\n\nexport default function persistReducer(config, baseReducer) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!config) throw new Error('config is required for persistReducer');\n    if (!config.key) throw new Error('key is required in persistor config');\n    if (!config.storage) throw new Error(\"redux-persist: config.storage is required. Try using one of the provided storage engines `import storage from 'redux-persist/lib/storage'`\");\n  }\n\n  var version = config.version !== undefined ? config.version : DEFAULT_VERSION;\n  var debug = config.debug || false;\n  var stateReconciler = config.stateReconciler === undefined ? autoMergeLevel1 : config.stateReconciler;\n  var getStoredState = config.getStoredState || defaultGetStoredState;\n  var timeout = config.timeout !== undefined ? config.timeout : DEFAULT_TIMEOUT;\n  var _persistoid = null;\n  var _purge = false;\n  var _paused = true;\n\n  var conditionalUpdate = function conditionalUpdate(state) {\n    // update the persistoid only if we are rehydrated and not paused\n    state._persist.rehydrated && _persistoid && !_paused && _persistoid.update(state);\n    return state;\n  };\n\n  return function (state, action) {\n    var _ref = state || {},\n        _persist = _ref._persist,\n        rest = _objectWithoutProperties(_ref, ['_persist']);\n\n    var restState = rest;\n\n    if (action.type === PERSIST) {\n      var _sealed = false;\n\n      var _rehydrate = function _rehydrate(payload, err) {\n        // dev warning if we are already sealed\n        if (process.env.NODE_ENV !== 'production' && _sealed) console.error('redux-persist: rehydrate for \"' + config.key + '\" called after timeout.', payload, err); // only rehydrate if we are not already sealed\n\n        if (!_sealed) {\n          action.rehydrate(config.key, payload, err);\n          _sealed = true;\n        }\n      };\n\n      timeout && setTimeout(function () {\n        !_sealed && _rehydrate(undefined, new Error('redux-persist: persist timed out for persist key \"' + config.key + '\"'));\n      }, timeout); // @NOTE PERSIST resumes if paused.\n\n      _paused = false; // @NOTE only ever create persistoid once, ensure we call it at least once, even if _persist has already been set\n\n      if (!_persistoid) _persistoid = createPersistoid(config); // @NOTE PERSIST can be called multiple times, noop after the first\n\n      if (_persist) return state;\n      if (typeof action.rehydrate !== 'function' || typeof action.register !== 'function') throw new Error('redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.');\n      action.register(config.key);\n      getStoredState(config).then(function (restoredState) {\n        var migrate = config.migrate || function (s, v) {\n          return Promise.resolve(s);\n        };\n\n        migrate(restoredState, version).then(function (migratedState) {\n          _rehydrate(migratedState);\n        }, function (migrateErr) {\n          if (process.env.NODE_ENV !== 'production' && migrateErr) console.error('redux-persist: migration error', migrateErr);\n\n          _rehydrate(undefined, migrateErr);\n        });\n      }, function (err) {\n        _rehydrate(undefined, err);\n      });\n      return _extends({}, baseReducer(restState, action), {\n        _persist: {\n          version: version,\n          rehydrated: false\n        }\n      });\n    } else if (action.type === PURGE) {\n      _purge = true;\n      action.result(purgeStoredState(config));\n      return _extends({}, baseReducer(restState, action), {\n        _persist: _persist\n      });\n    } else if (action.type === FLUSH) {\n      action.result(_persistoid && _persistoid.flush());\n      return _extends({}, baseReducer(restState, action), {\n        _persist: _persist\n      });\n    } else if (action.type === PAUSE) {\n      _paused = true;\n    } else if (action.type === REHYDRATE) {\n      // noop on restState if purging\n      if (_purge) return _extends({}, restState, {\n        _persist: _extends({}, _persist, {\n          rehydrated: true\n        }) // @NOTE if key does not match, will continue to default else below\n\n      });\n\n      if (action.key === config.key) {\n        var reducedState = baseReducer(restState, action);\n        var inboundState = action.payload; // only reconcile state if stateReconciler and inboundState are both defined\n\n        var reconciledRest = stateReconciler !== false && inboundState !== undefined ? stateReconciler(inboundState, state, reducedState, config) : reducedState;\n\n        var _newState = _extends({}, reconciledRest, {\n          _persist: _extends({}, _persist, {\n            rehydrated: true\n          })\n        });\n\n        return conditionalUpdate(_newState);\n      }\n    } // if we have not already handled PERSIST, straight passthrough\n\n\n    if (!_persist) return baseReducer(state, action); // run base reducer:\n    // is state modified ? return original : return updated\n\n    var newState = baseReducer(restState, action);\n    if (newState === restState) return state;else {\n      newState._persist = _persist;\n      return conditionalUpdate(newState);\n    }\n  };\n}","map":{"version":3,"sources":["F:/XAMPP/htdocs/ecom-just-react/node_modules/redux-persist/es/persistReducer.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","FLUSH","PAUSE","PERSIST","PURGE","REHYDRATE","DEFAULT_VERSION","autoMergeLevel1","createPersistoid","defaultGetStoredState","purgeStoredState","DEFAULT_TIMEOUT","persistReducer","config","baseReducer","process","env","NODE_ENV","Error","storage","version","undefined","debug","stateReconciler","getStoredState","timeout","_persistoid","_purge","_paused","conditionalUpdate","state","_persist","rehydrated","update","action","_ref","rest","restState","type","_sealed","_rehydrate","payload","err","console","error","rehydrate","setTimeout","register","then","restoredState","migrate","s","v","Promise","resolve","migratedState","migrateErr","result","flush","reducedState","inboundState","reconciledRest","_newState","newState"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport { FLUSH, PAUSE, PERSIST, PURGE, REHYDRATE, DEFAULT_VERSION } from './constants';\n\nimport autoMergeLevel1 from './stateReconciler/autoMergeLevel1';\nimport createPersistoid from './createPersistoid';\nimport defaultGetStoredState from './getStoredState';\nimport purgeStoredState from './purgeStoredState';\n\nvar DEFAULT_TIMEOUT = 5000;\n/*\n  @TODO add validation / handling for:\n  - persisting a reducer which has nested _persist\n  - handling actions that fire before reydrate is called\n*/\nexport default function persistReducer(config, baseReducer) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!config) throw new Error('config is required for persistReducer');\n    if (!config.key) throw new Error('key is required in persistor config');\n    if (!config.storage) throw new Error(\"redux-persist: config.storage is required. Try using one of the provided storage engines `import storage from 'redux-persist/lib/storage'`\");\n  }\n\n  var version = config.version !== undefined ? config.version : DEFAULT_VERSION;\n  var debug = config.debug || false;\n  var stateReconciler = config.stateReconciler === undefined ? autoMergeLevel1 : config.stateReconciler;\n  var getStoredState = config.getStoredState || defaultGetStoredState;\n  var timeout = config.timeout !== undefined ? config.timeout : DEFAULT_TIMEOUT;\n  var _persistoid = null;\n  var _purge = false;\n  var _paused = true;\n  var conditionalUpdate = function conditionalUpdate(state) {\n    // update the persistoid only if we are rehydrated and not paused\n    state._persist.rehydrated && _persistoid && !_paused && _persistoid.update(state);\n    return state;\n  };\n\n  return function (state, action) {\n    var _ref = state || {},\n        _persist = _ref._persist,\n        rest = _objectWithoutProperties(_ref, ['_persist']);\n\n    var restState = rest;\n\n    if (action.type === PERSIST) {\n      var _sealed = false;\n      var _rehydrate = function _rehydrate(payload, err) {\n        // dev warning if we are already sealed\n        if (process.env.NODE_ENV !== 'production' && _sealed) console.error('redux-persist: rehydrate for \"' + config.key + '\" called after timeout.', payload, err);\n\n        // only rehydrate if we are not already sealed\n        if (!_sealed) {\n          action.rehydrate(config.key, payload, err);\n          _sealed = true;\n        }\n      };\n      timeout && setTimeout(function () {\n        !_sealed && _rehydrate(undefined, new Error('redux-persist: persist timed out for persist key \"' + config.key + '\"'));\n      }, timeout);\n\n      // @NOTE PERSIST resumes if paused.\n      _paused = false;\n\n      // @NOTE only ever create persistoid once, ensure we call it at least once, even if _persist has already been set\n      if (!_persistoid) _persistoid = createPersistoid(config);\n\n      // @NOTE PERSIST can be called multiple times, noop after the first\n      if (_persist) return state;\n      if (typeof action.rehydrate !== 'function' || typeof action.register !== 'function') throw new Error('redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.');\n\n      action.register(config.key);\n\n      getStoredState(config).then(function (restoredState) {\n        var migrate = config.migrate || function (s, v) {\n          return Promise.resolve(s);\n        };\n        migrate(restoredState, version).then(function (migratedState) {\n          _rehydrate(migratedState);\n        }, function (migrateErr) {\n          if (process.env.NODE_ENV !== 'production' && migrateErr) console.error('redux-persist: migration error', migrateErr);\n          _rehydrate(undefined, migrateErr);\n        });\n      }, function (err) {\n        _rehydrate(undefined, err);\n      });\n\n      return _extends({}, baseReducer(restState, action), {\n        _persist: { version: version, rehydrated: false }\n      });\n    } else if (action.type === PURGE) {\n      _purge = true;\n      action.result(purgeStoredState(config));\n      return _extends({}, baseReducer(restState, action), {\n        _persist: _persist\n      });\n    } else if (action.type === FLUSH) {\n      action.result(_persistoid && _persistoid.flush());\n      return _extends({}, baseReducer(restState, action), {\n        _persist: _persist\n      });\n    } else if (action.type === PAUSE) {\n      _paused = true;\n    } else if (action.type === REHYDRATE) {\n      // noop on restState if purging\n      if (_purge) return _extends({}, restState, {\n        _persist: _extends({}, _persist, { rehydrated: true })\n\n        // @NOTE if key does not match, will continue to default else below\n      });if (action.key === config.key) {\n        var reducedState = baseReducer(restState, action);\n        var inboundState = action.payload;\n        // only reconcile state if stateReconciler and inboundState are both defined\n        var reconciledRest = stateReconciler !== false && inboundState !== undefined ? stateReconciler(inboundState, state, reducedState, config) : reducedState;\n\n        var _newState = _extends({}, reconciledRest, {\n          _persist: _extends({}, _persist, { rehydrated: true })\n        });\n        return conditionalUpdate(_newState);\n      }\n    }\n\n    // if we have not already handled PERSIST, straight passthrough\n    if (!_persist) return baseReducer(state, action);\n\n    // run base reducer:\n    // is state modified ? return original : return updated\n    var newState = baseReducer(restState, action);\n    if (newState === restState) return state;else {\n      newState._persist = _persist;\n      return conditionalUpdate(newState);\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}