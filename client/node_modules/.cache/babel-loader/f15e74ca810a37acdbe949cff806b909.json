{"ast":null,"code":"import { KEY_PREFIX, REHYDRATE } from './constants'; // @TODO remove once flow < 0.63 support is no longer required.\n\nexport default function createPersistoid(config) {\n  // defaults\n  var blacklist = config.blacklist || null;\n  var whitelist = config.whitelist || null;\n  var transforms = config.transforms || [];\n  var throttle = config.throttle || 0;\n  var storageKey = '' + (config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX) + config.key;\n  var storage = config.storage;\n  var serialize = config.serialize === false ? function (x) {\n    return x;\n  } : defaultSerialize; // initialize stateful values\n\n  var lastState = {};\n  var stagedState = {};\n  var keysToProcess = [];\n  var timeIterator = null;\n  var writePromise = null;\n\n  var update = function update(state) {\n    // add any changed keys to the queue\n    Object.keys(state).forEach(function (key) {\n      if (!passWhitelistBlacklist(key)) return; // is keyspace ignored? noop\n\n      if (lastState[key] === state[key]) return; // value unchanged? noop\n\n      if (keysToProcess.indexOf(key) !== -1) return; // is key already queued? noop\n\n      keysToProcess.push(key); // add key to queue\n    }); //if any key is missing in the new state which was present in the lastState,\n    //add it for processing too\n\n    Object.keys(lastState).forEach(function (key) {\n      if (state[key] === undefined) {\n        keysToProcess.push(key);\n      }\n    }); // start the time iterator if not running (read: throttle)\n\n    if (timeIterator === null) {\n      timeIterator = setInterval(processNextKey, throttle);\n    }\n\n    lastState = state;\n  };\n\n  function processNextKey() {\n    if (keysToProcess.length === 0) {\n      if (timeIterator) clearInterval(timeIterator);\n      timeIterator = null;\n      return;\n    }\n\n    var key = keysToProcess.shift();\n    var endState = transforms.reduce(function (subState, transformer) {\n      return transformer.in(subState, key, lastState);\n    }, lastState[key]);\n\n    if (endState !== undefined) {\n      try {\n        stagedState[key] = serialize(endState);\n      } catch (err) {\n        console.error('redux-persist/createPersistoid: error serializing state', err);\n      }\n    } else {\n      //if the endState is undefined, no need to persist the existing serialized content\n      delete stagedState[key];\n    }\n\n    if (keysToProcess.length === 0) {\n      writeStagedState();\n    }\n  }\n\n  function writeStagedState() {\n    // cleanup any removed keys just before write.\n    Object.keys(stagedState).forEach(function (key) {\n      if (lastState[key] === undefined) {\n        delete stagedState[key];\n      }\n    });\n    writePromise = storage.setItem(storageKey, serialize(stagedState)).catch(onWriteFail);\n  }\n\n  function passWhitelistBlacklist(key) {\n    if (whitelist && whitelist.indexOf(key) === -1 && key !== '_persist') return false;\n    if (blacklist && blacklist.indexOf(key) !== -1) return false;\n    return true;\n  }\n\n  function onWriteFail(err) {\n    // @TODO add fail handlers (typically storage full)\n    if (err && process.env.NODE_ENV !== 'production') {\n      console.error('Error storing data', err);\n    }\n  }\n\n  var flush = function flush() {\n    while (keysToProcess.length !== 0) {\n      processNextKey();\n    }\n\n    return writePromise || Promise.resolve();\n  }; // return `persistoid`\n\n\n  return {\n    update: update,\n    flush: flush\n  };\n} // @NOTE in the future this may be exposed via config\n\nfunction defaultSerialize(data) {\n  return JSON.stringify(data);\n}","map":{"version":3,"sources":["F:/XAMPP/htdocs/ecom-just-react/node_modules/redux-persist/es/createPersistoid.js"],"names":["KEY_PREFIX","REHYDRATE","createPersistoid","config","blacklist","whitelist","transforms","throttle","storageKey","keyPrefix","undefined","key","storage","serialize","x","defaultSerialize","lastState","stagedState","keysToProcess","timeIterator","writePromise","update","state","Object","keys","forEach","passWhitelistBlacklist","indexOf","push","setInterval","processNextKey","length","clearInterval","shift","endState","reduce","subState","transformer","in","err","console","error","writeStagedState","setItem","catch","onWriteFail","process","env","NODE_ENV","flush","Promise","resolve","data","JSON","stringify"],"mappings":"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","sourcesContent":["import { KEY_PREFIX, REHYDRATE } from './constants';\n\n// @TODO remove once flow < 0.63 support is no longer required.\n\nexport default function createPersistoid(config) {\n  // defaults\n  var blacklist = config.blacklist || null;\n  var whitelist = config.whitelist || null;\n  var transforms = config.transforms || [];\n  var throttle = config.throttle || 0;\n  var storageKey = '' + (config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX) + config.key;\n  var storage = config.storage;\n  var serialize = config.serialize === false ? function (x) {\n    return x;\n  } : defaultSerialize;\n\n  // initialize stateful values\n  var lastState = {};\n  var stagedState = {};\n  var keysToProcess = [];\n  var timeIterator = null;\n  var writePromise = null;\n\n  var update = function update(state) {\n    // add any changed keys to the queue\n    Object.keys(state).forEach(function (key) {\n      if (!passWhitelistBlacklist(key)) return; // is keyspace ignored? noop\n      if (lastState[key] === state[key]) return; // value unchanged? noop\n      if (keysToProcess.indexOf(key) !== -1) return; // is key already queued? noop\n      keysToProcess.push(key); // add key to queue\n    });\n\n    //if any key is missing in the new state which was present in the lastState,\n    //add it for processing too\n    Object.keys(lastState).forEach(function (key) {\n      if (state[key] === undefined) {\n        keysToProcess.push(key);\n      }\n    });\n\n    // start the time iterator if not running (read: throttle)\n    if (timeIterator === null) {\n      timeIterator = setInterval(processNextKey, throttle);\n    }\n\n    lastState = state;\n  };\n\n  function processNextKey() {\n    if (keysToProcess.length === 0) {\n      if (timeIterator) clearInterval(timeIterator);\n      timeIterator = null;\n      return;\n    }\n\n    var key = keysToProcess.shift();\n    var endState = transforms.reduce(function (subState, transformer) {\n      return transformer.in(subState, key, lastState);\n    }, lastState[key]);\n\n    if (endState !== undefined) {\n      try {\n        stagedState[key] = serialize(endState);\n      } catch (err) {\n        console.error('redux-persist/createPersistoid: error serializing state', err);\n      }\n    } else {\n      //if the endState is undefined, no need to persist the existing serialized content\n      delete stagedState[key];\n    }\n\n    if (keysToProcess.length === 0) {\n      writeStagedState();\n    }\n  }\n\n  function writeStagedState() {\n    // cleanup any removed keys just before write.\n    Object.keys(stagedState).forEach(function (key) {\n      if (lastState[key] === undefined) {\n        delete stagedState[key];\n      }\n    });\n\n    writePromise = storage.setItem(storageKey, serialize(stagedState)).catch(onWriteFail);\n  }\n\n  function passWhitelistBlacklist(key) {\n    if (whitelist && whitelist.indexOf(key) === -1 && key !== '_persist') return false;\n    if (blacklist && blacklist.indexOf(key) !== -1) return false;\n    return true;\n  }\n\n  function onWriteFail(err) {\n    // @TODO add fail handlers (typically storage full)\n    if (err && process.env.NODE_ENV !== 'production') {\n      console.error('Error storing data', err);\n    }\n  }\n\n  var flush = function flush() {\n    while (keysToProcess.length !== 0) {\n      processNextKey();\n    }\n    return writePromise || Promise.resolve();\n  };\n\n  // return `persistoid`\n  return {\n    update: update,\n    flush: flush\n  };\n}\n\n// @NOTE in the future this may be exposed via config\nfunction defaultSerialize(data) {\n  return JSON.stringify(data);\n}"]},"metadata":{},"sourceType":"module"}