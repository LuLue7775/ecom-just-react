{"ast":null,"code":"// // import { initializeApp } from \"firebase/app\";\n// import firebase from 'firebase/compat/app';\n// import 'firebase/compat/firestore';\n// import 'firebase/compat/auth';\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyDH7jfn9TY2_avm7drQKUS6zjCUAqq5A-0\",\n//   authDomain: \"ecom-just-react.firebaseapp.com\",\n//   projectId: \"ecom-just-react\",\n//   storageBucket: \"ecom-just-react.appspot.com\",\n//   messagingSenderId: \"533636479742\",\n//   appId: \"1:533636479742:web:cd902024f4c26021e603af\",\n//    // eslint-disable-next-line \n//   measurementId: \"${config.measurementId}\"\n// };\n// export const createUserProfileDocument = async( userAuth, additionalData) => {\n//     if(!userAuth) return;\n//     console.log(firebase.doc('users/123'));    \n// }\n// // Initialize Firebase\n// firebase.initializeApp(firebaseConfig);\n// export const auth = firebase.auth();\n// export const firestore = firebase.firestore();\n// const provider = new firebase.auth.GoogleAuthProvider();\n// provider.setCustomParameters({ prompt: 'select_account' });\n// export const signInWithGoogle = () => auth.signInWithPopup(provider);\n// export default firebase;\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { getFirestore, getDocs, collection, doc, updateDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDH7jfn9TY2_avm7drQKUS6zjCUAqq5A-0\",\n  authDomain: \"ecom-just-react.firebaseapp.com\",\n  projectId: \"ecom-just-react\",\n  storageBucket: \"ecom-just-react.appspot.com\",\n  messagingSenderId: \"533636479742\",\n  appId: \"1:533636479742:web:cd902024f4c26021e603af\",\n  // eslint-disable-next-line \n  measurementId: \"${config.measurementId}\"\n};\nconst firebase = initializeApp(firebaseConfig);\nexport const auth = getAuth();\nexport const firestore = getFirestore(firebase);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = doc(firestore, `users/${userAuth.uid}`);\n  const snapShot = await firestore.getDoc(userRef); // const userRef = firestore.doc(`users/${userAuth.uid}`);\n  // const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nconst provider = new GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  signInWithPopup(auth, provider).then(result => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken; // The signed-in user info.\n\n    const user = result.user; // ...\n  }).catch(error => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message; // The email of the user's account used.\n\n    const email = error.email; // The AuthCredential type that was used.\n\n    const credential = GoogleAuthProvider.credentialFromError(error); // ...\n  });\n};\nexport default firebase;","map":{"version":3,"sources":["F:/XAMPP/htdocs/ecom-just-react/src/firebase/firebase.utils.js"],"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","getFirestore","getDocs","collection","doc","updateDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","auth","firestore","createUserProfileDocument","userAuth","additionalData","userRef","uid","snapShot","getDoc","exists","displayName","email","createdAt","Date","set","error","console","log","message","provider","signInWithGoogle","then","result","credential","credentialFromResult","token","accessToken","user","catch","errorCode","code","errorMessage","credentialFromError"],"mappings":"AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAIA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,QAA6D,eAA7D;AACA,SAASC,YAAT,EAAuBC,OAAvB,EAAiCC,UAAjC,EAA6CC,GAA7C,EAAkDC,SAAlD,QAAmE,oBAAnE;AAGA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,iCAFO;AAGnBC,EAAAA,SAAS,EAAE,iBAHQ;AAInBC,EAAAA,aAAa,EAAE,6BAJI;AAKnBC,EAAAA,iBAAiB,EAAE,cALA;AAMnBC,EAAAA,KAAK,EAAE,2CANY;AAOlB;AACDC,EAAAA,aAAa,EAAE;AARI,CAAvB;AAWE,MAAMC,QAAQ,GAAGjB,aAAa,CAACS,cAAD,CAA9B;AACA,OAAO,MAAMS,IAAI,GAAGjB,OAAO,EAApB;AAEP,OAAO,MAAMkB,SAAS,GAAIf,YAAY,CAACa,QAAD,CAA/B;AAEP,OAAO,MAAMG,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAGf,QAAME,OAAO,GAAGhB,GAAG,CAACY,SAAD,EAAa,SAAQE,QAAQ,CAACG,GAAI,EAAlC,CAAnB;AACA,QAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACO,MAAV,CAAiBH,OAAjB,CAAvB,CAL2E,CAO3E;AACA;;AAEA,MAAI,CAACE,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBR,QAA/B;AACA,UAAMS,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMR,OAAO,CAACS,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGR;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOW,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOb,OAAP;AACD,CA1BM;AA8BT,MAAMc,QAAQ,GAAG,IAAIlC,kBAAJ,EAAjB;AAEA,OAAO,MAAMmC,gBAAgB,GAAG,MAAM;AAClCpC,EAAAA,eAAe,CAACgB,IAAD,EAAOmB,QAAP,CAAf,CACCE,IADD,CACOC,MAAD,IAAY;AACd;AACA,UAAMC,UAAU,GAAGtC,kBAAkB,CAACuC,oBAAnB,CAAwCF,MAAxC,CAAnB;AACA,UAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAHc,CAId;;AACA,UAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB,CALc,CAMd;AACH,GARD,EAQGC,KARH,CAQUb,KAAD,IAAW;AAChB;AACA,UAAMc,SAAS,GAAGd,KAAK,CAACe,IAAxB;AACA,UAAMC,YAAY,GAAGhB,KAAK,CAACG,OAA3B,CAHgB,CAIhB;;AACA,UAAMP,KAAK,GAAGI,KAAK,CAACJ,KAApB,CALgB,CAMhB;;AACA,UAAMY,UAAU,GAAGtC,kBAAkB,CAAC+C,mBAAnB,CAAuCjB,KAAvC,CAAnB,CAPgB,CAQhB;AACH,GAjBD;AAkBH,CAnBM;AAqBP,eAAehB,QAAf","sourcesContent":["\r\n// // import { initializeApp } from \"firebase/app\";\r\n// import firebase from 'firebase/compat/app';\r\n// import 'firebase/compat/firestore';\r\n// import 'firebase/compat/auth';\r\n\r\n// const firebaseConfig = {\r\n//   apiKey: \"AIzaSyDH7jfn9TY2_avm7drQKUS6zjCUAqq5A-0\",\r\n//   authDomain: \"ecom-just-react.firebaseapp.com\",\r\n//   projectId: \"ecom-just-react\",\r\n//   storageBucket: \"ecom-just-react.appspot.com\",\r\n//   messagingSenderId: \"533636479742\",\r\n//   appId: \"1:533636479742:web:cd902024f4c26021e603af\",\r\n//    // eslint-disable-next-line \r\n//   measurementId: \"${config.measurementId}\"\r\n// };\r\n\r\n// export const createUserProfileDocument = async( userAuth, additionalData) => {\r\n//     if(!userAuth) return;\r\n\r\n//     console.log(firebase.doc('users/123'));    \r\n// }\r\n\r\n// // Initialize Firebase\r\n// firebase.initializeApp(firebaseConfig);\r\n\r\n// export const auth = firebase.auth();\r\n// export const firestore = firebase.firestore();\r\n\r\n// const provider = new firebase.auth.GoogleAuthProvider();\r\n// provider.setCustomParameters({ prompt: 'select_account' });\r\n// export const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\n// export default firebase;\r\n\r\n\r\n\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\nimport { getFirestore, getDocs , collection, doc, updateDoc } from \"firebase/firestore\"; \r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDH7jfn9TY2_avm7drQKUS6zjCUAqq5A-0\",\r\n    authDomain: \"ecom-just-react.firebaseapp.com\",\r\n    projectId: \"ecom-just-react\",\r\n    storageBucket: \"ecom-just-react.appspot.com\",\r\n    messagingSenderId: \"533636479742\",\r\n    appId: \"1:533636479742:web:cd902024f4c26021e603af\",\r\n     // eslint-disable-next-line \r\n    measurementId: \"${config.measurementId}\"\r\n  };\r\n\r\n  const firebase = initializeApp(firebaseConfig);\r\n  export const auth = getAuth();\r\n\r\n  export const firestore  = getFirestore(firebase);\r\n\r\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n  \r\n    \r\n    const userRef = doc(firestore, `users/${userAuth.uid}`);\r\n    const snapShot = await firestore.getDoc(userRef);\r\n\r\n    // const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    // const snapShot = await userRef.get();\r\n  \r\n    if (!snapShot.exists) {\r\n      const { displayName, email } = userAuth;\r\n      const createdAt = new Date();\r\n      try {\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          ...additionalData\r\n        });\r\n      } catch (error) {\r\n        console.log('error creating user', error.message);\r\n      }\r\n    }\r\n  \r\n    return userRef;\r\n  };\r\n\r\n\r\n\r\nconst provider = new GoogleAuthProvider();\r\n\r\nexport const signInWithGoogle = () => {\r\n    signInWithPopup(auth, provider)\r\n    .then((result) => {\r\n        // This gives you a Google Access Token. You can use it to access the Google API.\r\n        const credential = GoogleAuthProvider.credentialFromResult(result);\r\n        const token = credential.accessToken;\r\n        // The signed-in user info.\r\n        const user = result.user;\r\n        // ...\r\n    }).catch((error) => {\r\n        // Handle Errors here.\r\n        const errorCode = error.code;\r\n        const errorMessage = error.message;\r\n        // The email of the user's account used.\r\n        const email = error.email;\r\n        // The AuthCredential type that was used.\r\n        const credential = GoogleAuthProvider.credentialFromError(error);\r\n        // ...\r\n    });\r\n};\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}